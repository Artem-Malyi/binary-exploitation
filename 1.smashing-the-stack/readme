Table of Contents
   step 1: altering execution flow by changing function return address from within the function itself
   step 2: example of position independent code that launches /bin/sh
   step 3: example of null-free position independent code that launches /bin/sh
   step 4: simplest example of strcpy and a shellcode
   step 5: obtain return address by fuzzing technique with disabled ASLR
   step 6: obtain return address by fuzzing technique for very small vulnerable buffers with disabled ASLR
   step 7: jmp esp gadget technique
   step 8: ret2libc technique with system and exit functions' addresses on the stack (ASLR disabled)

Prerequisites
1. sudo apt install gcc gcc-multilib gdb make

Build
2. make all
   make rwret - build step1 example: altering execution flow by changing function return address
   make shellcode - build step2 example: position indepented (PI) code that launches /bin/sh
   make nfshellcode - build step3 example: PI and null bytes free (NF) code that launches /bin/sh
   make example1 - build simple non-inlined assembly program in at&t syntax
   make example1 - build position independent and null byte free code version of example1
   make overflow - build step4 example: strcpy and PI NF code
   make fuzzer1 - build step5 binaries: generator1, vulnerable1 and copies fuzzer1.sh
   make fuzzer2 - build step6 binaries: generator2, vulnerable2 and copies fuzzer2.sh
   make jmpesp - build vulnerable3 binary for jump esp gadget technique, see step7/readme
   make ret2libc - build vulnerable4 binary for ret2libc technique, see step8/readme
   make clean

Debug
3. Ctrl+x, 1 - source code window
   Ctrl+x, 2 - assembly view window
   b(reakpoint) main
   r(un)
   si(step one instruction)
   x/10xw $esp - examine 10 machine words (4 bytes long) in hex format starting from stack pointer
   x/50c $esp - examine 50 chars in ASCII representaion from stack pointer
   x/s 0xffffccb4 - show ASCII string from given address
   x/s *((char**)environ+0) - shows ASCII string of the first env var in the process environment block

Inspired by
   http://phrack.org/issues/49/14.html
   local copy in ./smashing-the-stack-for-fun-and-profit.txt
